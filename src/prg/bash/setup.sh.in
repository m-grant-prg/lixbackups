#! @bashlocation@
#########################################################################
#									#
#	setup.sh is automatically generated,				#
#		please do not modify!					#
#									#
#########################################################################

#########################################################################
#									#
# Author: Copyright (C) 2012-2019, 2021, 2024  Mark Grant		#
#									#
# Released under the GPLv3 only.					#
# SPDX-License-Identifier: GPL-3.0-only					#
#									#
# Purpose:								#
# To setup the config files for the Backup package.			#
#									#
# Syntax:	setup.sh [-h || -V ]					#
#									#
# Exit Codes:	0 - success						#
#		1 - failure						#
#									#
# Further Info:								#
# The backup package mounts a share as a target for the backup.		#
# Something like:-							#
# 	the NAS share \\Ambrosia\charybdisbck				#
#	or the NFS share hermes:/srv/backups/charybdis			#
# 	mounted on							#
# 	/mnt/charybdisbck						#
# In order to make the package portable all the necessary parameters	#
# are stored in a $PREFIX/etc/lixbackups/backups.conf file.		#
# This script will create the conf files as necessary. It will NOT	#
# maintain the files once created, post-installation the files should	#
# be maintained by using an editor.					#
# Please refer to the man page for the structure of the backups.conf	#
# file.									#
# This script creates the following files:				#
#	backups.conf							#
#	Weekly CIFS share credentials file - if required		#
#	Ad hoc CIFS share credentials file - if required		#
#	bckweekly.exclude (empty)					#
#	bckdaily.exclude (empty)					#
#	bckseldaily.files (empty)					#
#	bckseldaily.exclude (empty)					#
#									#
#########################################################################


##################
# Init variables #
##################
script_exit_code=0
outputprefix="$(basename $0):"
version=1.2.9				# set version variable
etclocation=@sysconfdir@/lixbackups	# Path to etc directory
packageversion=@pkgversion@		# Version of the complete package

weeklysharetype=""
weeklytarget=""
weeklycredfile=""
weeklyusr=""
weeklypwd=""
weeklynotifyuser=""
adhocsharetype=""
adhoctarget=""
adhoccredfile=""
adhocusr=""
adhocpwd=""
adhocnotifyuser=""
cifsversion=""
mntdir=""

#############
# Functions #
#############

# Output $1 to stdout or stderr depending on $2
output()
{
	if [ $2 = 0 ]; then
		echo "$outputprefix $1"
	else
		echo "$outputprefix $1" 1>&2
	fi
}

# Standard function to test command error ($1 is $?) and exit if non-zero
std_cmd_err_handler()
{
	if [ $1 != 0 ]; then
		script_exit_code=$1
		script_exit
	fi
}

# Standard function to tidy up and return exit code
script_exit()
{
	exit $script_exit_code
}

# Standard trap exit function
trap_exit()
{
script_exit_code=1
output "Script terminating due to trap received. Code: "$script_exit_code 1
script_exit
}

# Setup trap
trap trap_exit SIGHUP SIGINT SIGTERM

########
# Main #
########
# Process command line arguments with getopts.
while getopts :hV arg; do
	case $arg in
	h)	echo "Usage is $0 [options]"
		echo "	-h displays usage information"
		echo "	OR"
		echo "	-V displays version information"
		script_exit_code=0
		script_exit
		;;
	V)	echo "$0 Script version "$version
		echo "$0 Package version "$packageversion
		script_exit_code=0
		script_exit
		;;
	\?)	script_exit_code=1
		output "Invalid argument -$OPTARG." 1
		script_exit
		;;
	esac
done

if [ -f $etclocation/backups.conf ]; then
	script_exit_code=1
	output "File(s) exist, they must be maintained with an editor." 1
	script_exit
fi

read -p "Weekly backup share type: " weeklysharetype
read -p "Weekly backup target: " weeklytarget
if [ $weeklysharetype = "CIFS" ]; then
	read -p "Weekly credential file (full path): " weeklycredfile
	read -p "Weekly user profile: " weeklyusr
	read -p "Weekly password for user profile: " weeklypwd
fi
read -p "Weekly user to notify: " weeklynotifyuser

read -p "Ad hoc backup share type: " adhocsharetype
read -p "Ad hoc backup target: " adhoctarget
if [ $adhocsharetype = "CIFS" ]; then
	read -p "Ad hoc credential file (full path): " adhoccredfile
	read -p "Ad hoc user profile: " adhocusr
	read -p "Ad hoc password for user profile: " adhocpwd
fi
read -p "Ad hoc user to notify: " adhocnotifyuser

read -p "CIFS version to use (blank for default): " cifsversion

read -p "Mount backup directory: " mntdir

# Setup location
test -d $etclocation || mkdir -p $etclocation
std_cmd_err_handler $?

# Write $etclocation/backups.conf file
echo "weeklytype="$weeklysharetype >>$etclocation/backups.conf
std_cmd_err_handler $?
echo "weeklytarget="$weeklytarget >>$etclocation/backups.conf
std_cmd_err_handler $?
echo "weeklycredfile="$weeklycredfile >>$etclocation/backups.conf
std_cmd_err_handler $?
echo "weeklynotifyuser="$weeklynotifyuser >>$etclocation/backups.conf
std_cmd_err_handler $?

echo "adhoctype="$adhocsharetype >>$etclocation/backups.conf
std_cmd_err_handler $?
echo "adhoctarget="$adhoctarget >>$etclocation/backups.conf
std_cmd_err_handler $?
echo "adhoccredfile="$adhoccredfile >>$etclocation/backups.conf
std_cmd_err_handler $?
echo "adhocnotifyuser="$adhocnotifyuser >>$etclocation/backups.conf
std_cmd_err_handler $?

echo "cifsversion="$cifsversion >>$etclocation/backups.conf
std_cmd_err_handler $?

echo "mntdir="$mntdir >>$etclocation/backups.conf
std_cmd_err_handler $?

# Ensure there is a new line
echo "" >>$etclocation/backups.conf
std_cmd_err_handler $?

# Write weekly CIFS credential file.
if [ $weeklysharetype = "CIFS" ]; then
	echo "username="$weeklyusr >>$weeklycredfile
	std_cmd_err_handler $?
	echo "password="$weeklypwd >>$weeklycredfile
	std_cmd_err_handler $?
	chmod 0600 $weeklycredfile
	std_cmd_err_handler $?
fi

# Write ad hoc CIFS credential file.
if [ $adhocsharetype = "CIFS" ]; then
	echo "username="$adhocusr >>$adhoccredfile
	std_cmd_err_handler $?
	echo "password="$adhocpwd >>$adhoccredfile
	std_cmd_err_handler $?
	chmod 0600 $adhoccredfile
	std_cmd_err_handler $?
fi

# Create $etclocation/backups inclde and exclude files
touch $etclocation/bckweekly.exclude
std_cmd_err_handler $?
touch $etclocation/bckdaily.exclude
std_cmd_err_handler $?
touch $etclocation/bckseldaily.files
std_cmd_err_handler $?
touch $etclocation/bckseldaily.exclude
std_cmd_err_handler $?

script_exit_code=0
output "Files set up." 0
script_exit
