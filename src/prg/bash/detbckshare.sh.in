#! @bashlocation@
#########################################################################
#									#
#	detbckshare is automatically generated,				#
#		please do not modify!					#
#									#
#########################################################################

#########################################################################
#									#
# Script ID: detbckshare						#
# Author: Copyright (C) 2012-2019, 2021  Mark Grant			#
#									#
# Released under the GPLv3 only.					#
# SPDX-License-Identifier: GPL-3.0-only					#
#									#
# Purpose:								#
# To unmount the backup share. E.g.					#
#	/mnt/mybackupdirectory						#
#	from								#
# 	\\MyServer\mybackupdirectory or hermes:/srv/backups/charybdis	#
#									#
# Syntax:	detbckshare [-h --help || -v --verbose || -V --version ]#
#									#
# Exit codes used:-							#
# Bash standard Exit Codes:	0 - success				#
#				1 - general failure			#
# User-defined exit code range is 64 - 113				#
#	C/C++ Semi-standard exit codes from sysexits.h range is 64 - 78	#
#		EX_USAGE	64	command line usage error	#
#		EX_DATAERR	65	data format error		#
#		EX_NOINPUT	66	cannot open input		#
#		EX_NOUSER	67	addressee unknown		#
#		EX_NOHOST	68	host name unknown		#
#		EX_UNAVAILABLE	69	service unavailable		#
#		EX_SOFTWARE	70	internal software error		#
#		EX_OSERR	71	system error (e.g., can't fork)	#
#		EX_OSFILE	72	critical OS file missing	#
#		EX_CANTCREAT	73	can't create (user) output file	#
#		EX_IOERR	74	input/output error		#
#		EX_TEMPFAIL	75	temp failure; user is invited	#
#					to retry			#
#		EX_PROTOCOL	76	remote error in protocol	#
#		EX_NOPERM	77	permission denied		#
#		EX_CONFIG	78	configuration error		#
#	User-defined (here) exit codes range 79 - 113:			#
#		None							#
#									#
# Further info:								#
# This script is part of the portable backup package.			#
#									#
#									#
#########################################################################

#########################################################################
#									#
# Changelog								#
#									#
# Date		Author	Version	Description				#
#									#
# 09/04/2010	MG	1.0.1	Created for Linux.			#
# 26/08/2010	MG	1.0.2	Revised to support FreeBSD as well as	#
#				Linux. Also, backup variables		#
#				introduced at beginning of script to	#
#				enhance portability. (E.g. System,	#
#				backup user etc.).			#
# 18/11/2010	MG	1.0.3	Changed to emit help and version on	#
#				input of correct flag as argument. Also	#
#				stored version in string in Init section#
# 28/11/2010	MG	1.0.4	Changed script to read parameters from	#
#				etclocation/backups.conf.		#
# 10/01/2012	MG	1.0.5	Removed the .sh extension from the	#
#				command name.				#
# 05/11/2012	MG	1.0.6	Reverted to .sh file extension.		#
# 26/02/2013	MG	1.0.7	Changed command line option processing	#
#				to use getopts.				#
# 01/04/2013	MG	1.0.8	Moved config files to new backups	#
#				directory under sysconfdir. Added	#
#				exclude files for system, weekly, daily	#
#				and data.				#
# 22/08/2013	MG	1.0.9	Debian best practice documentation	#
#				requires that programs placed in the	#
#				PATH should not have extensions as the	#
#				programs may be rewritten in a		#
#				different language. This would then	#
#				require a name change, or, if left	#
#				as-is would cause confusion. So name	#
#				changed to remove .sh extension.	#
# 06/01/2014	MG	1.1.1	Changed stdout & stderr message output	#
#				to use a function directing to one or	#
#				other based on a status. Changed	#
#				version option to -V. Added verbose	#
#				option -v.				#
# 22/11/2014	MG	1.1.2	Add overall package version to -V.	#
# 22/11/2014	MG	1.1.3	Switched from getopts to GNU getopt to	#
#				allow long options.			#
# 03/02/2015	MG	1.1.4	Remove BSD support.			#
# 03/02/2015	MG	1.2.1	Add NFS share support. Add support for	#
#				different targets for weekly and ad hoc	#
#				backups.				#
# 24/02/2015	MG	1.2.2	Change configuration files directory to	#
#				lixbackups to limit risk of conflict	#
#				with other backup packages.		#
# 26/02/2015	MG	1.2.3	Use logger to write key messages to	#
#				syslog.					#
# 20/06/2017	MG	1.2.4	Ensure script respects the 80 column	#
#				rule.					#
# 30/11/2017	MG	1.2.5	Add SPDX license tags to source files.	#
# 03/12/2017	MG	1.2.6	Adopt normal exit code policy; 0 on	#
#				success, 1 on failure.			#
# 09/01/2019	MG	1.2.7	Use absolute bash path in shebang	#
#				instead of env. Using env is OK for a 	#
#				non-AutoTools script.			#
# 13/02/2019	MG	1.3.1	Do not hard code outputprefix contents.	#
#				Change verbosity to boolean verbose.	#
#				Use standardised output function.	#
#				Remove script_exit_code variable.	#
#				Improve trap function.			#
#				Use [[ ... ]] when appropriate.		#
#				Refactor into functions.		#
#				Improve logic on check and unmount.	#
#				Make appropriate variables readonly.	#
#				Use meaningful exit codes.		#
#				Use more standard printf aot echo.	#
#				Ensure numerics use (( )) not [[ ]]	#
#				(( var )) does not need $.		#
#				Specify type for numeric variables.	#
# 19/04/2019	MG	1.3.2	Replace obsolete backticks with $(cmd).	#
# 09/08/2019	MG	1.3.3	Correct getopt CL for proper quoting.	#
# 11/10/2019	MG	1.3.4	Move script_exit() before it is used.	#
# 05/03/2021	MG	1.3.5	Prepend invocations of programs in this	#
#				package with sbindir to allow for	#
#				parallel AutoTool and distro package	#
#				installations.				#
# 24/11/2021	MG	1.3.6	Tighten SPDX tag.			#
#									#
#########################################################################

##################
# Init variables #
##################
readonly outputprefix="$(basename $0):"
readonly version=1.3.6				# set version variable
readonly packageversion=@pkgversion@		# Version of the package
readonly etclocation=@sysconfdir@/lixbackups	# Path to etc directory

mntdir=""
verbose=false

#############
# Functions #
#############

# -h --help output.
# No parameters
# No return value
usage()
{
cat << EOF
Usage is $0 [options]
	-h or --help displays usage information
	OR
	-v or --verbose verbose output
	OR
	-V or --version displays version information
EOF
}

# Standard function to emit messages depending on various parameters.
# Parameters -	$1 What:-	The message to emit.
#		$2 Where:-	stdout == 0
#				stderr != 0
#		$3 Syslog:-	$3 == 0, No.
#				$3 != 0, Yes.
# No return value.
output()
{
	if (( !$2 )); then
		if $verbose ; then
			printf "%s %s\n" $outputprefix "$1"
		fi
	else
		printf "%s %s\n" $outputprefix "$1" 1>&2
	fi
	if (( $3 )); then
		logger "$outputprefix $1"
		std_cmd_err_handler $?
	fi
}

# Standard function to tidy up and return exit code.
# Parameters - 	$1 is the exit code.
# No return value.
script_exit()
{
	exit $1
}

# Standard function to test command error and exit if non-zero.
# Parameters - $1 is $?
# No return value.
std_cmd_err_handler()
{
	if (( $1 )); then
		script_exit $1
	fi
}

# Standard trap exit function.
# No parameters.
# No return value.
trap_exit()
{
	local -i exit_code=$?
	local msg

	msg="Script terminating with exit code $exit_code due to trap received."
	output "$msg" 1 0
	script_exit $exit_code
}

# Process command line arguments with GNU getopt.
# Parameters -	$1 is the command line.
# No return value.
proc_CL()
{
	local GETOPTTEMP
	local tmpGETOPTTEMP

	tmpGETOPTTEMP="getopt -o hvV --long help,verbose,version"
	GETOPTTEMP=$($tmpGETOPTTEMP -n "$0" -- "$@")
	std_cmd_err_handler $?

	eval set -- "$GETOPTTEMP"
	std_cmd_err_handler $?

	while true; do
		case "$1" in
		-h|--help)
			usage
			shift
			script_exit 0
			;;
		-v|--verbose)
			verbose=true
			shift
			;;
		-V|--version)
			printf "%s Script version %s\n" $0 $version
			printf "%s Package version %s\n" $0 $packageversion
			shift
			script_exit 0
			;;
		--)	shift
			break
			;;
		*)	output "Internal error." 1 0
			script_exit 64
			;;
		esac
	done

	# Script does not accept other arguments.
	if (( $# > 0 )); then
		output "Invalid argument." 1 0
		script_exit 64
	fi
}

# Process the config file just looking for mntdir.
# Parameters - None
# No return value.
proc_config_file()
{
	local input=()
	local msg
	local oldIFS=$IFS

	if [[ ! -f $etclocation/backups.conf \
		|| ! -r $etclocation/backups.conf ]]; then
		msg="Config file $etclocation/backups.conf does not exist, is "
		msg+="not a regular file or is not readable."
		output "$msg" 1 1
		script_exit 66
	fi

	IFS="="

	exec 3<$etclocation/backups.conf
	while read -u3 -ra input; do
		case ${input[0]} in
		mntdir)
			mntdir=${input[1]}
			;;
		esac
	done
	exec 3<&-

	IFS=$oldIFS
}


########
# Main #
########

# Setup trap.
trap trap_exit SIGHUP SIGINT SIGQUIT SIGTERM

proc_CL "$@"

proc_config_file

# Exit if not mounted.
if [[ $(@sbindir@/chkbckshare -bt) == FALSE ]]; then
	status=1
	output "Backup share not mounted. Script exit code: $status" 1 1
	script_exit $status
fi

# Finally unmount.
umount $mntdir
status=$?

if (( status )); then
	msg="Failed to unmount backup share. Umount error: "
	msg+="$status Script exit code: $status"
	output "$msg" 1 1
	script_exit $status
fi

output "Share unmounted from $mntdir" 0 1
script_exit 0

