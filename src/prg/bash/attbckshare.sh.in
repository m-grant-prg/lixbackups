#! @bashlocation@
#########################################################################
#									#
#	attbckshare is automatically generated,				#
#		please do not modify!					#
#									#
#########################################################################

#########################################################################
#									#
# Author: Copyright (C) 2012-2019, 2021, 2024  Mark Grant		#
#									#
# Released under the GPLv3 only.					#
# SPDX-License-Identifier: GPL-3.0-only					#
#									#
# Purpose:								#
# To mount a CIFS or NFS backup share. E.g.				#
# 	\\Ambrosia\charybdisbck or hermes:/srv/backups/charybdis	#
# 	on								#
# 	/mnt/charybdisbck						#
#									#
# Syntax:	See usage().						#
#									#
# Exit codes used:-							#
# Bash standard Exit Codes:	0 - success				#
#				1 - general failure			#
# User-defined exit code range is 64 - 113				#
#	C/C++ Semi-standard exit codes from sysexits.h range is 64 - 78	#
#		EX_USAGE	64	command line usage error	#
#		EX_DATAERR	65	data format error		#
#		EX_NOINPUT	66	cannot open input		#
#		EX_NOUSER	67	addressee unknown		#
#		EX_NOHOST	68	host name unknown		#
#		EX_UNAVAILABLE	69	service unavailable		#
#		EX_SOFTWARE	70	internal software error		#
#		EX_OSERR	71	system error (e.g., can't fork)	#
#		EX_OSFILE	72	critical OS file missing	#
#		EX_CANTCREAT	73	can't create (user) output file	#
#		EX_IOERR	74	input/output error		#
#		EX_TEMPFAIL	75	temp failure; user is invited	#
#					to retry			#
#		EX_PROTOCOL	76	remote error in protocol	#
#		EX_NOPERM	77	permission denied		#
#		EX_CONFIG	78	configuration error		#
#	User-defined (here) exit codes range 79 - 113:			#
#		None							#
#									#
# Further Info:								#
# This script mounts a CIFS or NFS share as a target for the backup	#
# scripts.								#
#									#
# In order to make the package portable all the necessary parameters	#
# are stored in a $PREFIX/etc/lixbackups/backups.conf file.		#
# For further information please consult the backups.conf man page.	#
#									#
#########################################################################


##################
# Init variables #
##################
readonly outputprefix="$(basename $0):"
readonly version=1.3.7				# Set version variable
readonly etclocation=@sysconfdir@/lixbackups	# Path to etc directory
readonly packageversion=@pkgversion@		# Version of the package

adhoc=false
bckuptype=""
cifsversion=""
mntdir=""
verbose=false
weekly=false


#############
# Functions #
#############

# -h --help output.
# No parameters
# No return value
usage()
{
cat << EOF
Usage is:-
${0##*/} {-a|-w} [-v]
${0##*/} {-h|-V}
Usage is:-
${0##*/} [OPTIONS]
	-a or --adhoc mount the ad hoc backup target share
	OR
	-h or --help displays usage information
	OR
	-v or --verbose verbose output
	OR
	-V or --version displays version information
	OR
	-w or --weekly mount the weekly target backup share
EOF
}

# Standard function to emit messages depending on various parameters.
# Parameters -	$1 What:-	The message to emit.
#		$2 Where:-	stdout == 0
#				stderr != 0
#		$3 Syslog:-	$3 == 0, No.
#				$3 != 0, Yes.
# No return value.
output()
{
	if (( !$2 )); then
		if $verbose ; then
			printf "%s %s\n" $outputprefix "$1"
		fi
	else
		printf "%s %s\n" $outputprefix "$1" 1>&2
	fi
	if (( $3 )); then
		logger "$outputprefix $1"
		std_cmd_err_handler $?
	fi
}

# Standard function to tidy up and return exit code.
# Parameters - 	$1 is the exit code.
# No return value.
script_exit()
{
	exit $1
}

# Standard function to test command error and exit if non-zero.
# Parameters - $1 is $?
# No return value.
std_cmd_err_handler()
{
	if (( $1 )); then
		script_exit $1
	fi
}

# Standard trap exit function.
# No parameters.
# No return value.
trap_exit()
{
	local -i exit_code=$?
	local msg

	msg="Script terminating with exit code $exit_code due to trap received."
	output "$msg" 1 0
	script_exit $exit_code
}

# Process command line arguments with GNU getopt.
# Parameters -	$1 is the command line.
# No return value.
proc_CL()
{
	local GETOPTTEMP
	local msg
	local tmpGETOPTTEMP

	tmpGETOPTTEMP="getopt -o ahvVw --long adhoc,help,verbose,version,"
	tmpGETOPTTEMP+="weekly"
	GETOPTTEMP=$($tmpGETOPTTEMP -n "$0" -- "$@")
	std_cmd_err_handler $?

	eval set -- "$GETOPTTEMP"
	std_cmd_err_handler $?

	while true; do
		case "$1" in
		-a|--adhoc)
			if $weekly ; then
				msg="Options a and w are mutually exclusive."
				output "$msg" 1 0
				script_exit 64
			fi
			adhoc=true
			bckuptype="adhoc"
			shift
			;;
		-h|--help)
			usage
			shift
			script_exit 0
			;;
		-v|--verbose)
			verbose=true
			shift
			;;
		-V|--version)
			printf "%s Script version %s\n" $0 $version
			printf "%s Package version %s\n" $0 $packageversion
			shift
			script_exit 0
			;;
		-w|--weekly)
			if $adhoc ; then
				msg="Options a and w are mutually exclusive."
				output "$msg" 1 0
				script_exit 64
			fi
			weekly=true
			bckuptype="weekly"
			shift
			;;
		--)	shift
			break
			;;
		*)	output "Internal error." 1 0
			script_exit 64
			;;
		esac
	done

	# Script does not accept other arguments.
	if (( $# > 0 )); then
		output "Invalid argument." 1 0
		script_exit 64
	fi

	# One option has to be selected.
	if ! $adhoc && ! $weekly ; then
		output "Either a or w must be set." 1 0
		script_exit 64
	fi
}

# Process the config file.
# Parameters - None
# No return value.
proc_config_file()
{
	local oldIFS=$IFS
	local input=()
	local msg
	local adhoccredfile adhocnotifyuser adhoctarget adhoctype
	local weeklycredfile weeklynotifyuser weeklytarget weeklytype

	if [[ ! -f $etclocation/backups.conf \
		|| ! -r $etclocation/backups.conf ]]; then
		msg="Config file $etclocation/backups.conf does not exist, is "
		msg+="not a regular file or is not readable."
		output "$msg" 1 1
		script_exit 66
	fi

	IFS="="

	exec 3<$etclocation/backups.conf
	while read -u3 -ra input; do
		case ${input[0]} in
		weeklytype)
			weeklytype=${input[1]}
			;;
		weeklytarget)
			weeklytarget=${input[1]}
			;;
		weeklycredfile)
			weeklycredfile=${input[1]}
			;;
		weeklynotifyuser)
			weeklynotifyuser=${input[1]}
			;;
		adhoctype)
			adhoctype=${input[1]}
			;;
		adhoctarget)
			adhoctarget=${input[1]}
			;;
		adhoccredfile)
			adhoccredfile=${input[1]}
			;;
		adhocnotifyuser)
			adhocnotifyuser=${input[1]}
			;;
		cifsversion)
			cifsversion=${input[1]}
			;;
		mntdir)
			mntdir=${input[1]}
			;;
		esac
	done
	exec 3<&-

	case $bckuptype in
	adhoc)
		type=$adhoctype
		target=$adhoctarget
		credfile=$adhoccredfile
		notifyuser=$adhocnotifyuser
		;;
	weekly)
		type=$weeklytype
		target=$weeklytarget
		credfile=$weeklycredfile
		notifyuser=$weeklynotifyuser
		;;
	esac

	IFS=$oldIFS
}

# Build the mount command.
# Parameters - none
# No return value.
build_mnt_cmd()
{
	mountCL="mount -t "
	case $type in
	NFS)
		mountCL=$mountCL"nfs $target $mntdir"
		;;
	CIFS)
		mountCL=$mountCL"cifs -o credentials=$credfile $target $mntdir"
		if [[ $cifsversion ]]; then
			mountCL+=" -o vers=$cifsversion"
		fi
		;;
	*)	output "Invalid share type." 1 1
		script_exit 78
		;;
	esac
}


########
# Main #
########

# Setup trap.
trap trap_exit SIGHUP SIGINT SIGQUIT SIGTERM

proc_CL "$@"

# Read parameters from $etclocation/backups.conf
proc_config_file

# Build Mount command.
build_mnt_cmd

# Exit if share already mounted.
if [[ $(@sbindir@/chkbckshare -bt) == TRUE ]]; then
	msg="Backup share already mounted."
	output "$msg" 1 1
	script_exit 1
fi

# Finally mount.
eval "$mountCL"
status=$?

if (( status )); then
	msg="Failed to mount backup share. Mount error: $status"
	msg+=" Script exit code: $status"
	output "$msg" 1 1
	script_exit $status
fi

output "Share $target mounted on $mntdir" 0 1
script_exit 0

